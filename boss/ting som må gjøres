
ting å få gjort

nettverk

backup - filehandler
kostfunksjon


forbedring av heis:
 - skriv om elevator så den finner ny retning før den sover
 - lag en egen funksjon for fjerning av ordre mens heisen beveger seg
 - fjern ordre i etasjen før heisen sover på etasjen



KOSTFUNKSJON
	// gjør dette utenfor kostfunksjonen - sjekk først om en heis står stille i etasjen (kost 0) ?

	- hver etasje unna teller 1, hvert stop teller 1 (kan endres). så hvis den må 2 etasjer opp og må stoppe i mellom blir det 3, hvis den bare skal 2 opp uten stop blir det 2
	- hvis heisen har dir = 0: tell etasjer unna
	- hvis heisen har dir != 0, tell med stop til hvor langt unna stoppet er. hvis heisen må endre retning, snu når heisen vil snu. (f.eks heisen snur i 1, da må funksjonen snu i 1. og ikke 0.)

lag en funksjon cost
	- sjekker om noen heiser står stille eller er på vei i samme riktig (og evt om de evt stopper og kan snu om 1 eller få stop (hvis den ikke har ordre videre i retningen vil heisen bytte retning hvis den får orderen og ankommer etasjen))
	
		- hvis dette er tilfellet kall funksjonen "simpleCost", en enkel funksjon som fungerer hvis retningen er 0 eller i riktig retning (og evt ekstra greia)

	- hvis alle heiser er på vei i motsatt retning

		- kall funksjonen complexCost
			- complexCost iterer gjennom ordermatrix FRA currentfloor og i retningen heisen har TIL order.Floor i motsatt retning. bruk en ekstra variabel for å ta med casen der den vil kunne motta flere ordere som vil bli lagt til mellom nåværende ordre og orderen som skal legges til.
			- evt implementer at heiser som får flere ordre i retningen de beveger seg, og har ordre i andre retning, sender de ut til master igjen.



func simpleCost(ElevInfo ElevatorInfo, order ButtonSignal) int {
	return int(math.Abs(float64(ElevInfo.Floor - order.Floor)))
}

func complexCost() int { // får bare inn ordere som er i retning, men motsatt rettet, eller "bak" heisen
	cost := 0
	betweenOrders := false
	if elev.direction > 0 {
		if elev.floor < order.floor { // orderen vil ned
			for i := 3; i > elev.floor; i-- {
				if !orderOnFloor() && !betweenOrders {
					continue
				} else {
					if elev.orderMatrix[i][0] {
						cost++
					}
					if elev.orderMatrix[i][1] && i < order.floor { // tar bare med orderene ned som heisen stopper på før orderen
						cost++
					}
					if elev.orderMatrix[i][2] && !(elev.orderMatrix[i][0] || elev.orderMatrix[i][1]) {
						cost++
					}
					betweenOrders = true
				}	
				cost++
			}

		} else { // orderen ligger "bak" heisen ---- skal ikke legge til andre ordre i samme retning som er mellom heisen og ordre, eller etasjer den ikke skal passere (alt annet)
			for i := 0; i <= 3; i++ {
				if !orderOnFloor() && (!betweenOrders || !isOrdersAbove()) {
					continue
				} else {
					if elev.orderMatrix[i][0] && (i >= elev.currentFloor && i < order.floor) { // tar bare med orderene ned som heisen stopper på før orderen
						cost++
					}
					if elev.orderMatrix[i][1] {
						cost++
					}
					if elev.orderMatrix[i][2] && !(elev.orderMatrix[i][0] || elev.orderMatrix[i][1]) {
						cost++
					}
					betweenOrders = true
				}	
				cost++
			}
		}
	} else { //elev.direction < 0
		if elev.floor > order.floor { // orderen vil opp
			for i := 3; i < elev.floor; i-- {
				if !orderOnFloor() && !betweenOrders {
					continue
				} else {
					if elev.orderMatrix[i][0] && i < order.floor { // tar bare med orderene opp som heisen stopper på før orderen
						cost++
					}
					if elev.orderMatrix[i][1] {
						cost++
					}
					if elev.orderMatrix[i][2] && !(elev.orderMatrix[i][0] || elev.orderMatrix[i][1]) {
						cost++
					}
				}
				cost++
			}
		} else { // orderen ligger "bak" heisen ---- skal ikke legge til andre ordre i samme retning som er mellom heisen og ordre, eller etasjer den ikke skal passere (alt annet)
			for i := 0; i <= 3; i++ {
				if !orderOnFloor() && (!betweenOrders || !isOrdersBelow()) {
					continue
				} else {
					if elev.orderMatrix[i][0] {
						cost++
					}
					if elev.orderMatrix[i][1] && (i >= elev.currentFloor && i < order.floor) { // tar bare med orderene ned som heisen stopper på før orderen
						cost++
					}
					if elev.orderMatrix[i][2] && !(elev.orderMatrix[i][0] || elev.orderMatrix[i][1]) {
						cost++
					}
					betweenOrders = true
				}	
				cost++
			}
		}
	}

}

